#!/bin/bash

HERE="$(dirname "$(readlink -f "${0}")")"

progName="notepad++"
progArch="-x86_64"
progVer=
progRealPath="$HERE/usr/share/$progName"
progHome="$HOME/.$progName"
progBin="$progName.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"
progReg="/tmp/dlloverrides.reg"

# Symlink stuff
mkdir -p "$progHome" || exit 1
# Delete broken symlinks
find -L "$progHome" -maxdepth 2 -type l -delete
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" 2> /dev/null

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r $HERE/usr/share/icons ${HOME}/.local/share
mkdir -p "${HOME}/.local/share/applications"
DesktopFilePath="${HOME}/.local/share/applications/$progName.desktop"

echo "[Desktop Entry]" >$DesktopFilePath
echo "Type=Application" >>$DesktopFilePath
echo "Name=$progName" >>$DesktopFilePath
echo "GenericName=Text Editor" >>$DesktopFilePath
echo "Comment=Simple and free source code editor." >>$DesktopFilePath
echo "Encoding=UTF-8" >>$DesktopFilePath
echo "Version=$progVer" >>$DesktopFilePath
echo "Icon=$progName" >>$DesktopFilePath
echo "TryExec=${OWD}/${progName}_${progVer}${progArch}.AppImage" >>$DesktopFilePath
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage %F" >>$DesktopFilePath
echo "MimeType=text/plain;text/css;text/html;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-java;text/x-makefile;text/x-python;text/x-sh;application/x-wine-extension-ini;application/x-wine-extension-inf;" >>$DesktopFilePath
echo "Categories=Utility;TextEditor;" >>$DesktopFilePath
echo "Terminal=false" >>$DesktopFilePath
echo "StartupWMClass=$progBin" >>$DesktopFilePath

fi
}

# check for wine appimage
checkwine=$(find $HOME/Downloads $HOME/bin $HOME/.local/bin -type f \( -name '*.appimage' -o -name '*.AppImage' \) 2>/dev/null | grep -e "wine-stable" -e 'Wine-stable' | head -n 1 | wc -l)

if [ $checkwine -eq 1 ]; then
export WINESERVER=$HERE/usr/bin/wineserver
export WINE=$HERE/usr/bin/wine
else
echo "wine-stable appimage is missing can not run npp"
echo ""
echo "Download wine-stable*bionic.appimage from https://github.com/mmtrt/Wine_Appimage/releases"
echo ""
echo "Then"
echo ""
echo "chmod +x wine-stable*.AppImage"
echo ""
echo "Also make sure you have single copy of wine-stable appimage present these locations"
echo ""
echo "$HOME/Downloads ; $HOME/bin ; $HOME/.local/bin"
exit 1
fi

# Create custom $WINEPREFIX and add $WINEDLLOVERRIDES
export WINEPREFIX="${progHome}/.wine" WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG=fixme-all

if [ ! -d $WINEPREFIX ]; then

# link ttf & ttc fonts from root to wineprefix
mkdir -p $WINEPREFIX/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" $WINEPREFIX/drive_c/windows/Fonts/ \; &>/dev/null

mkdir -p $WINEPREFIX/drive_c/users/$USER
cp -R "$HERE/winedata/Application Data" $WINEPREFIX/drive_c/users/$USER

# Remove xml file links & copy xml files
rm $progHome/updater/gup.xml &>/dev/null
cp $progRealPath/updater/gup.xml $progHome/updater &>/dev/null

for xmls in $(ls $progRealPath/ | grep xml)
do
rm $progHome/$xmls &>/dev/null
cp $progRealPath/$xmls $progHome/ &>/dev/null
done

# Check for LANG=zh_* in locale and apply font changes if it exists.
if (locale | grep -e 'LANG=zh_CN' -e 'LANG=zh_SG') >/dev/null 2>&1; then cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
"MS Shell Dlg"="Noto Sans CJK SC Regular"
"Tms Rmn"="Noto Sans CJK SC Regular"
EOF
regedit $progReg
sleep 1
rm $progReg &>/dev/null
fi

if (locale | grep -e 'LANG=zh_HK' -e 'LANG=zh_MO' -e 'LANG=zh_TW') >/dev/null 2>&1; then cat > $progReg <<'EOF'
Windows Registry Editor Version 5.00

[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
"MS Shell Dlg"="Noto Sans CJK TC Regular"
"Tms Rmn"="Noto Sans CJK TC Regular"
EOF
regedit $progReg
sleep 1
rm $progReg &>/dev/null
fi

echo "disable" > "$WINEPREFIX/.update-timestamp"
fi

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

if [ "$1" == "winecfg" ] ; then
  $WINE "winecfg" 2>/dev/null
elif [ "$1" == "install" ]; then
  dkico
else
  $WINE "$progHome/$progBin" "${args[@]}" 2>/dev/null
fi
