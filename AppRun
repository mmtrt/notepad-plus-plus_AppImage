#!/bin/bash

HERE="$(dirname "$(readlink -f "${0}")")"

progName="notepad++"
progArch="-x86_64"
progVer=
progRealPath="$HERE/usr/share/$progName"
progHome="$HOME/.$progName"
progBin="$progName.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"

# env used by unionfs-fuse
RO_WINEPREFIX="$HERE/.wine/"
MNT_WINEPREFIX="$progHome/.wine"
TMP_WINEPREFIX_OVERLAY=/tmp/."${progName}".unionfs

# Symlink stuff
mkdir -p "$MNT_WINEPREFIX" "$TMP_WINEPREFIX_OVERLAY" || exit 1
# Delete broken symlinks
find -L "$progHome" -maxdepth 2 -type l -delete
# Update existing symlinks, add new symlinks
cp -urs "$progRealPath/"* "$progHome" 2> /dev/null

# do unionfs-fuse magic here
"$HERE"/usr/bin/unionfs-fuse -o use_ino,nonempty,uid=$UID -ocow "$TMP_WINEPREFIX_OVERLAY"=RW:"$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1

function finish {
  echo "Cleaning up"
  killall "$HERE"/usr/bin/unionfs-fuse
}
trap finish EXIT

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$HERE"/usr/share/icons "${HOME}"/.local/share
mkdir -p "${HOME}/.local/share/applications"
DesktopFilePath="${HOME}/.local/share/applications/$progName.desktop"

{
echo "[Desktop Entry]"
echo "Type=Application"
echo "Name=$progName"
echo "GenericName=Text Editor"
echo "Comment=Simple and free source code editor."
echo "Encoding=UTF-8"
echo "Version=$progVer"
echo "Icon=$progName"
echo "TryExec=${OWD}/${progName}_${progVer}${progArch}.AppImage"
echo "Exec=${OWD}/${progName}_${progVer}${progArch}.AppImage %F"
echo "MimeType=text/plain;text/css;text/html;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-java;text/x-makefile;text/x-python;text/x-sh;application/x-wine-extension-ini;application/x-wine-extension-inf;"
echo "Categories=Utility;TextEditor;"
echo "Terminal=false"
echo "StartupWMClass=$progBin"
} >> "$DesktopFilePath"

fi
}

# check for wine appimage
checkwine=$(find "$HOME"/Downloads "$HOME"/bin "$HOME"/.local/bin -type f \( -name '*.appimage' -o -name '*.AppImage' \) 2>/dev/null | grep -e "wine-stable" -e 'Wine-stable' | head -n 1 | wc -l)

if [ "$checkwine" -eq 1 ]; then
export WINESERVER=$HERE/usr/bin/wineserver
export WINE=$HERE/usr/bin/wine
else
echo "wine-stable appimage is missing can not run npp"
echo ""
echo "Download wine-stable*bionic.appimage from https://github.com/mmtrt/Wine_Appimage/releases"
echo ""
echo "Then"
echo ""
echo "chmod +x wine-stable*.AppImage"
echo ""
echo "Also make sure you have single copy of wine-stable appimage present these locations"
echo ""
echo "$HOME/Downloads ; $HOME/bin ; $HOME/.local/bin"
exit 1
fi

# Create custom $WINEPREFIX and add $WINEDLLOVERRIDES
export WINEPREFIX="${progHome}/.wine" WINEDLLOVERRIDES="mscoree,mshtml=" WINEDEBUG=fixme-all

if [ ! -d "$WINEPREFIX/drive_c/users/$USER" ]; then

# Remove xml file links & copy xml files
rm "$progHome"/updater/gup.xml
cp -Rvp "$progRealPath"/updater/gup.xml "$progHome"/updater

# Copy over theme files
cp -Rvp "$HERE/winedata/Application Data/Notepad++/themes" "$progHome"

for xmls in $(ls $progRealPath/ | grep xml)
do
rm "$progHome"/"$xmls" &>/dev/null
cp -Rvp "$progRealPath"/"$xmls" "$progHome"/
done

fi

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

if [ "$1" == "winecfg" ] ; then
  $WINE "winecfg"
elif [ "$1" == "install" ]; then
  dkico
else
  $WINE "$progHome/$progBin" "${args[@]}"
fi
